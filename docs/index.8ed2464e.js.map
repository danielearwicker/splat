{"mappings":"ACAA,MAAM,EAAQ,SAAS,aAAa,CAAC,UAC/B,EAAS,SAAS,aAAa,CAAC,WAChC,EAAQ,SAAS,aAAa,CAAC,UAC/B,EAAW,SAAS,aAAa,CAAC,aAClC,EAAa,SAAS,aAAa,CAAC,gBA+B1C,SAAS,IACL,GAAI,CACA,IAAM,EAAI,IAAI,OAAO,EAAM,KAAK,EAE1B,EAAQ,EAAS,KAAK,CACvB,KAAK,CAAC,mBACN,GAAG,CAAC,CAAC,EAAG,IAAM,AAzB3B,CAAA,SAAiB,CAAY,CAAE,CAAc,EACzC,GAAI,EACA,MAAO,IAAM,EAGjB,IAAM,EAAQ,EAAK,OAAO,CAAC,KAC3B,GAAI,AAAU,KAAV,EACA,OAAO,AAAC,GAAuB,CAAC,CAAC,EAAK,CAG1C,IAAM,EAAQ,EAAK,SAAS,CAAC,EAAG,GAC1B,EAAU,EAAK,SAAS,CAAC,EAAQ,GAEvC,OAAO,AAAC,IACJ,IAAM,EAAQ,CAAC,CAAC,EAAM,CACtB,OAAO,EAAQ,SAAS,CAAC,EAAG,EAAQ,MAAM,CAAG,EAAM,MAAM,EAAI,CACjE,CACJ,CAAA,EAQmC,EAAG,EAAI,GAAM,GAExC,CAAA,EAAO,KAAK,CAAG,EAAM,KAAK,CACrB,KAAK,CAAC,MACN,MAAM,CAAC,AAAC,GAAS,EAAK,IAAI,IAC1B,GAAG,CAAC,AAAC,IACF,IAAM,EAAI,EAAE,IAAI,CAAC,UACjB,AAAK,EACE,EAAM,GAAG,CAAC,AAAC,GAAM,EAAE,IAAI,IAAI,CAAC,IADpB,EAEnB,GACC,IAAI,CAAC,MAEV,EAAW,SAAS,CAAG,OAC3B,CAAE,MAAO,EAAG,CACR,EAAW,SAAS,CAAG,cACvB,EAAO,KAAK,CAAG,EAAE,OAAO,AAC5B,CACJ,CApDA,EAAM,KAAK,CAAG,CAAC;;;;2BAIY,CAAC,CAE5B,EAAM,KAAK,CAAG,gCAEd,EAAS,KAAK,CAAG,uCA8CjB,EAAM,gBAAgB,CAAC,QAAS,GAChC,EAAM,gBAAgB,CAAC,QAAS,GAChC,EAAS,gBAAgB,CAAC,QAAS,GAEnC","sources":["<anon>","index.ts"],"sourcesContent":["const input = document.querySelector(\"#input\");\nconst output = document.querySelector(\"#output\");\nconst regex = document.querySelector(\"#regex\");\nconst template = document.querySelector(\"#template\");\nconst regexPanel = document.querySelector(\"#regex-panel\");\ninput.value = `beatles/1-love-me-do.mp3\nbeatles/2-she-loves-you.mp3\nbeatles/3-paperback-writer.mp3\nkinks/1-sunny-afternoon.mp3\nkinks/2-waterloo-sunset.mp3`;\nregex.value = \"([a-z]+)/(\\\\d+)-([a-z-]+).mp3\";\ntemplate.value = \"artist ${1} track ${2:00} title ${3}\";\nfunction compile(part, plain) {\n    if (plain) return ()=>part;\n    const colon = part.indexOf(\":\");\n    if (colon === -1) return (m)=>m[part];\n    const index = part.substring(0, colon);\n    const pattern = part.substring(colon + 1);\n    return (m)=>{\n        const value = m[index];\n        return pattern.substring(0, pattern.length - value.length) + value;\n    };\n}\nfunction update() {\n    try {\n        const r = new RegExp(regex.value);\n        const parts = template.value.split(/\\$\\{([\\d:]+)\\}/g).map((p, i)=>compile(p, i % 2 === 0));\n        output.value = input.value.split(\"\\n\").filter((line)=>line.trim()).map((line)=>{\n            const m = r.exec(line);\n            if (!m) return \"\";\n            return parts.map((p)=>p(m)).join(\"\");\n        }).join(\"\\n\");\n        regexPanel.className = \"panel\";\n    } catch (e) {\n        regexPanel.className = \"panel error\";\n        output.value = e.message;\n    }\n}\ninput.addEventListener(\"input\", update);\nregex.addEventListener(\"input\", update);\ntemplate.addEventListener(\"input\", update);\nupdate();\n\n//# sourceMappingURL=index.8ed2464e.js.map\n","const input = document.querySelector(\"#input\") as HTMLTextAreaElement;\nconst output = document.querySelector(\"#output\") as HTMLTextAreaElement;\nconst regex = document.querySelector(\"#regex\") as HTMLInputElement;\nconst template = document.querySelector(\"#template\") as HTMLInputElement;\nconst regexPanel = document.querySelector(\"#regex-panel\") as HTMLDivElement;\n\ninput.value = `beatles/1-love-me-do.mp3\nbeatles/2-she-loves-you.mp3\nbeatles/3-paperback-writer.mp3\nkinks/1-sunny-afternoon.mp3\nkinks/2-waterloo-sunset.mp3`;\n\nregex.value = \"([a-z]+)/(\\\\d+)-([a-z-]+).mp3\";\n\ntemplate.value = \"artist ${1} track ${2:00} title ${3}\";\n\nfunction compile(part: string, plain: boolean) {\n    if (plain) {\n        return () => part;\n    }\n\n    const colon = part.indexOf(\":\");\n    if (colon === -1) {\n        return (m: RegExpExecArray) => m[part];\n    }\n\n    const index = part.substring(0, colon);\n    const pattern = part.substring(colon + 1);\n\n    return (m: RegExpExecArray) => {\n        const value = m[index];\n        return pattern.substring(0, pattern.length - value.length) + value;\n    };\n}\n\nfunction update() {\n    try {\n        const r = new RegExp(regex.value);\n\n        const parts = template.value\n            .split(/\\$\\{([\\d:]+)\\}/g)\n            .map((p, i) => compile(p, i % 2 === 0));\n\n        output.value = input.value\n            .split(\"\\n\")\n            .filter((line) => line.trim())\n            .map((line) => {\n                const m = r.exec(line);\n                if (!m) return \"\";\n                return parts.map((p) => p(m)).join(\"\");\n            })\n            .join(\"\\n\");\n\n        regexPanel.className = \"panel\";\n    } catch (e) {\n        regexPanel.className = \"panel error\";\n        output.value = e.message;\n    }\n}\n\ninput.addEventListener(\"input\", update);\nregex.addEventListener(\"input\", update);\ntemplate.addEventListener(\"input\", update);\n\nupdate();\n"],"names":["input","document","querySelector","output","regex","template","regexPanel","update","r","RegExp","value","parts","split","map","p","i","compile","part","plain","colon","indexOf","m","index","substring","pattern","length","filter","line","trim","exec","join","className","e","message","addEventListener"],"version":3,"file":"index.8ed2464e.js.map"}